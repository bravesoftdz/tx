[[@txDefs,DataLank,txSession,Classes,]][[!var
id,pid,pidx,i,j,l,sl_i,x,newObjTypeID,newWeight,RlmID:integer;
pids:array of integer;
url,s:string;
name,desc:WideString;
tokens:array of record
  id,weight:integer;
end;
references:array of record
  reftype,obj2,weight:integer;
end;
sl:TStringList;
par:IXxmParameter;
]][[

//TODO: transaction?
//TODO: Session.IsAdmin(multiple?

pid:=0;//counter warning
pidx:=$100;
SetLength(pids,pidx);
for i:=0 to pidx-1 do pids[i]:=-1;
pids[0]:=Context['pid'].AsInteger;
newObjTypeID:=Context['objtype'].AsInteger;
newWeight:=0;//Context['weight'].AsInteger;
CheckFormProtect(Context);

//check realm
RlmID:=DBSingleValue('SELECT rlm_id FROM Obj WHERE id=?',[pids[0]],DefaultRlmID);
Session.HasRealmPermission(pids[0],RlmID,rpEdit);

//quick add tokref, list first, get weight-delta from types
//if id=0 then
 begin
  SetLength(tokens,FilterRecentCount);
  par:=Context['addtok'];
  i:=0;
  while par<>nil do
   begin
    s:=par.Value;
    if s<>'' then
     begin
      tokens[i].id:=StrToInt(s);
      tokens[i].weight:=DBSingleValue('SELECT weight FROM TokType WHERE id=?',[tokens[i].id],0);
        inc(newWeight,tokens[i].weight);
      inc(i);
     end;
    par:=par.NextBySameName;
   end;
  SetLength(tokens,i);
  SetLength(references,FilterRecentCount);
  par:=Context['addref'];
  i:=0;
  while par<>nil do
   begin
    s:=par.Value;
    if s<>'' then
     begin
      l:=Length(s);
      j:=1;
      while (j<=l) and (s[j]<>';') do inc(j);
      SetLength(references,i+1);
      references[i].reftype:=StrToInt(Copy(s,1,j-1));
      references[i].obj2:=StrToInt(Copy(s,j+1,l-j));
      references[i].weight:=DBSingleValue('SELECT weight FROM RefType WHERE id=?',[references[i].reftype],0);
      inc(newWeight,references[i].weight);
      inc(i);
     end;
    par:=par.NextBySameName;
   end;
  SetLength(references,i);
 end;

newWeight:=newWeight+DBSingleValue('SELECT weight FROM ObjType WHERE id=?',[newObjTypeID],0);

id:=pids[0];
desc:='';
sl:=TStringList.Create;
try
  sl.Text:=Context['names'].Value;
  for sl_i:=0 to sl.Count-1 do
   begin

      name:=sl[sl_i];//Context['name'].Value;
      l:=Length(name);
      i:=0;
      while (i<l) and (name[i+1]<=' ') do inc(i);
      while (pidx<i) do
       begin
        x:=pidx;
        inc(pidx,$100);
        SetLength(pids,pidx);
        while (x<pidx) do
         begin
          pids[x]:=-1;
          inc(x);
         end;
       end;
      if pids[i]=-1 then
       begin
        x:=i+1;
        while (x<pidx) and (pids[x]=-1) do inc(x);
        if x<pidx then pids[i]:=pids[x] else pids[i]:=id;
       end;
      pid:=pids[i];
      inc(i);
      while (i<pidx) do
       begin
        pids[i]:=-1;
        inc(i);
       end;
      name:=Trim(name);

      Session.DbCon.BeginTrans;
      try
        id:=Session.DbCon.Insert('Obj',
          ['pid',pid
          ,'objtype_id',newObjTypeID
          ,'name',name
          ,sqlDesc,desc
          ,'url',''
          ,'weight',newWeight
          ,'rlm_id',RlmID
          ,'c_ts',VNow
          ,'c_uid',Session.UserID
          ,'m_ts',VNow
          ,'m_uid',Session.UserID
          ],'id');

        TermStore.StoreTerms(itObj,id,id,name+#13#10+desc);
        Session.AddFilterRecent(itObjType,newObjTypeID);

        //history
        if Use_ObjHist then
          Session.DbCon.Insert('ObjHist',
            ['obj_id',id
            ,'rlm_id',RlmID
            ,'ts',VNow
            ,'uid',Session.UserID
            ,'name',name
            ,sqlDesc,desc
            ,'weight',newWeight
            ]);

      //quick add tokens, references
      for i:=0 to Length(tokens)-1 do
        if tokens[i].id<>0 then
         begin
          Session.DbCon.Insert('Tok',
            ['obj_id',id
            ,'toktype_id',tokens[i].id
            ,sqlDesc,''
            ,'weight',tokens[i].weight
            ,'c_ts',VNow
            ,'c_uid',Session.UserID
            ,'m_ts',VNow
            ,'m_uid',Session.UserID
            ]);
          Session.DbCon.Insert('Rpt',
            ['obj_id',id
            ,'ts',VNow
            ,'uid',Session.UserID
            ,sqlDesc,''
            ,'weight',tokens[i].weight
            ,'toktype_id',tokens[i].id
            ]);
         end;
      for i:=0 to Length(references)-1 do
        if references[i].reftype<>0 then
         begin
          Session.DbCon.Insert('Ref',
            ['obj1_id',id
            ,'reftype_id',references[i].reftype
            ,'obj2_id',references[i].obj2
            ,sqlDesc,''
            ,'weight',references[i].weight
            ,'c_ts',VNow
            ,'c_uid',Session.UserID
            ,'m_ts',VNow
            ,'m_uid',Session.UserID
            ]);
          Session.DbCon.Insert('Rpt',
            ['obj_id',id
            ,'ts',VNow
            ,'uid',Session.UserID
            ,sqlDesc,''
            ,'weight',references[i].weight
            ,'reftype_id',references[i].reftype
            ,'obj2_id',references[i].obj2
            ]);
         end;

        if Use_ObjTokRefCache then
          Context.Include('aObjTokRefCache.xxmi',[id]);

      if Use_Unread and not Session.Stealth then
        Session.DbCon.Insert('Obx',['obj_id',id]);

        Session.DbCon.CommitTrans;
      except
        Session.DbCon.RollbackTrans;
        raise;
      end;

   end;

finally
  sl.Free;
end;

url:='Item.xxm?x=i'+IntToStr(pid);
Context.Redirect(url,true);
<<a href="[[=url]]">>=url<</a>
