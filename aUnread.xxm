[[@txSession,SQLiteData,]][[!var
id,pid,x1,x2,id1,id2,i:integer;
qr,qr1:TSQLiteStatement;
url:string;
]][[

//assert Use_Unread
//assert Session.QryUnread

CheckCallProtect(Context);
id:=Context['id'].AsInteger;
Session.DbCon.Execute('BEGIN TRANSACTION');
try
  qr:=TSQLiteStatement.Create(Session.DbCon,'SELECT pid FROM Obj WHERE id=?',[id]);
  try
    pid:=qr.GetInt(0);
  finally
    qr.Free;
  end;
  url:='Item.xxm?x=i'+IntToStr(pid);
  qr1:=TSQLiteStatement.Create(Session.DbCon,'SELECT id FROM Obx WHERE obj_id=? ORDER BY id',[id]);
  try
    while qr1.Read do
     begin
      id:=qr1.GetInt('id');
      id1:=0;
      id2:=0;
      qr:=TSQLiteStatement.Create(Session.DbCon,'SELECT * FROM Urx WHERE uid=? AND ? BETWEEN id1 AND id2 ORDER BY Urx.id1',[Session.UserID,id]);
      try
        if qr.Read then//first read needed, see while qr.Read below!
         begin
          x1:=qr.GetInt('id1');
          x2:=qr.GetInt('id2');
          if (x1=id) and (x2=id) then
            Session.DbCon.Execute('DELETE FROM Urx WHERE id=?',[qr['id']])
          else
           begin
            Session.DbCon.Execute('UPDATE Urx SET id2=? WHERE id=?',[id-1,qr['id']]);
            if x2>id then
             begin
              id1:=id+1;
              id2:=qr['id2'];
             end;
           end;
          //superfluous? see also MaintUrx.xxm
          while qr.Read and (qr.GetInt('id0')=id) do
           begin
            i:=qr.GetInt('id2');
            if id2<i then id2:=i;
            Session.DbCon.Execute('DELETE FROM Urx WHERE id=?',[qr['id']]);
           end;
         end;
      finally
        qr.Free;
      end;
      if id1<>0 then Session.DbCon.Execute('INSERT INTO Urx (uid,id1,id2) VALUES (?,?,?)',[Session.UserID,id1,id2]);
     end;
  finally
    qr1.Free;
  end;
  Session.DbCon.Execute('COMMIT TRANSACTION');
except
  Session.DbCon.Execute('ROLLBACK TRANSACTION');
  raise;
end;

Context.Redirect(url,true);
<<p><a href="[[=url]]">continue</a></p>>
